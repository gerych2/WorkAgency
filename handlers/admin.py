from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from services.storage import DATA_FILE
from services.users import _load_users
from services.admins import add_admin, remove_admin
from config import ADMIN_PASSWORD
from services.storage import load_requests, _save_all
from services.admins import list_admins

router = Router()

# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è --- #
class AdminSearch(StatesGroup):
    waiting_query = State()

class AdminBroadcast(StatesGroup):
    waiting_text = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω–∫–∏ --- #
def admin_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="üóÇ –ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ", callback_data="admin_unaccepted")],
        [InlineKeyboardButton(text="üóÇ –ö–ª–∏–µ–Ω—Ç—ã", callback_data="admin_list_clients")],
        [InlineKeyboardButton(text="üóÇ –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã", callback_data="admin_list_specialists")],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data="admin_export")],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫", callback_data="admin_search")],
        [InlineKeyboardButton(text="üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏", callback_data="admin_logout")],
    ])

# --- –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∫—É --- #
@router.message(Command("admin"))
async def admin_cmd(message: types.Message):
    if message.from_user.id in list_admins():
        await message.answer("–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã", reply_markup=admin_menu_kb())
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")

@router.message(Command("logout"))
async def admin_logout_cmd(message: types.Message):
    remove_admin(message.from_user.id)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏.")

@router.message(lambda m: m.text == ADMIN_PASSWORD)
async def admin_check_password(message: types.Message):
    add_admin(message.from_user.id)
    await message.answer("–ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", reply_markup=admin_menu_kb())

# --- Callback –≤—ã—Ö–æ–¥–∞ --- #
@router.callback_query(F.data == "admin_logout")
async def admin_logout_cb(callback: types.CallbackQuery):
    remove_admin(callback.from_user.id)
    await callback.message.edit_text("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏.")
    await callback.answer()

# --- Callback: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ --- #
@router.callback_query(F.data == "admin_stats")
async def admin_stats_cb(callback: types.CallbackQuery):
    data = load_requests()
    total = len(data["clients"]) + len(data["specialists"])
    unaccepted = sum(1 for arr in data.values() for x in arr if x["status"] == "new")
    text = (
        f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total}\n"
        f"–ù–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö: {unaccepted}\n"
        f"–ö–ª–∏–µ–Ω—Ç—ã: {len(data['clients'])}\n"
        f"–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã: {len(data['specialists'])}"
    )
    await callback.message.edit_text(text, reply_markup=admin_menu_kb())
    await callback.answer()

# --- Callback: –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏ --- #
@router.callback_query(F.data == "admin_unaccepted")
async def admin_unaccepted_cb(callback: types.CallbackQuery):
    data = load_requests()
    new_entries = [x for arr in data.values() for x in arr if x["status"] == "new"]

    if not new_entries:
        await callback.message.edit_text("–ù–µ—Ç –Ω–µ–ø—Ä–∏–Ω—è—Ç—ã—Ö –∑–∞—è–≤–æ–∫", reply_markup=admin_menu_kb())
    else:
        text = "–ù–µ–ø—Ä–∏–Ω—è—Ç—ã–µ –∑–∞—è–≤–∫–∏:\n\n"
        for entry in new_entries[-10:]:
            text += f"‚Ä¢ [{entry['type']}] {entry['name']} ({entry['contact']})\n"
            text += f"/accept_{entry['id']}\n\n"
        text += "\n–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –∑–∞—è–≤–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."
        await callback.message.edit_text(text, reply_markup=admin_menu_kb())
    await callback.answer()

@router.callback_query(F.data.startswith("accept:"))
async def accept_request_cb(callback: types.CallbackQuery, bot: Bot):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å" –Ω–∞ –∑–∞—è–≤–∫–µ
    """
    entry_id = callback.data.split(":")[1]
    data = load_requests()

    found = None
    for arr in data.values():
        for entry in arr:
            if entry["id"] == entry_id:
                found = entry
                if entry["status"] == "new":
                    entry["status"] = "accepted"
                    entry["accepted_by"] = callback.from_user.username or str(callback.from_user.id)
                break

    if not found:
        await callback.answer("–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        return

    _save_all(data)

    new_text = (
        f"–ó–∞—è–≤–∫–∞ ({found['type']}):\n\n"
        f"<b>–ò–º—è:</b> {found['name']}\n"
        f"<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {found['contact']}\n"
        f"–°—Ç–∞—Ç—É—Å: ‚úÖ –ü—Ä–∏–Ω—è—Ç–∞ ({found['accepted_by']})\n"
        f"<i>{found['timestamp']}</i>"
    )

    # –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    for admin_id in list_admins():
        try:
            await bot.send_message(admin_id, new_text)
        except Exception:
            pass

    await callback.answer("–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    await callback.message.edit_text(new_text)
# --- Callback: –∫–ª–∏–µ–Ω—Ç—ã --- #
@router.callback_query(F.data == "admin_list_clients")
async def admin_list_clients_cb(callback: types.CallbackQuery):
    data = load_requests()["clients"]
    if not data:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤", reply_markup=admin_menu_kb())
    else:
        text = "\n".join(
            [f"#{idx} - {entry.get('name')} | {entry.get('contact')} (—Å—Ç–∞—Ç—É—Å: {entry['status']})"
             for idx, entry in enumerate(data[-10:], 1)]
        )
        await callback.message.edit_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫ –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤:\n\n{text}", reply_markup=admin_menu_kb())
    await callback.answer()

# --- Callback: —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã --- #
@router.callback_query(F.data == "admin_list_specialists")
async def admin_list_specialists_cb(callback: types.CallbackQuery):
    data = load_requests()["specialists"]
    if not data:
        await callback.message.edit_text("–ù–µ—Ç –∑–∞—è–≤–æ–∫ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤", reply_markup=admin_menu_kb())
    else:
        text = "\n".join(
            [f"#{idx} - {entry.get('name')} | {entry.get('contact')} (—Å—Ç–∞—Ç—É—Å: {entry['status']})"
             for idx, entry in enumerate(data[-10:], 1)]
        )
        await callback.message.edit_text(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞—è–≤–æ–∫ –æ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:\n\n{text}", reply_markup=admin_menu_kb())
    await callback.answer()

# --- Callback: —ç–∫—Å–ø–æ—Ä—Ç --- #
@router.callback_query(F.data == "admin_export")
async def admin_export_cb(callback: types.CallbackQuery):
    if not DATA_FILE.exists():
        await callback.message.answer("–§–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
    else:
        await callback.message.answer_document(types.FSInputFile(DATA_FILE))
    await callback.answer()

# --- Callback: –ø–æ–∏—Å–∫ --- #
@router.callback_query(F.data == "admin_search")
async def admin_search_cb(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç—É):")
    await state.set_state(AdminSearch.waiting_query)
    await callback.answer()

@router.message(AdminSearch.waiting_query)
async def admin_do_search(message: types.Message, state: FSMContext):
    query = message.text.lower()
    data = load_requests()
    results = []
    for typ, arr in data.items():
        for entry in arr:
            if query in entry.get("name", "").lower() or query in entry.get("contact", "").lower():
                results.append((typ, entry))
    if not results:
        await message.answer("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=admin_menu_kb())
    else:
        txt = "\n\n".join(
            [f"[{typ}] {x['name']} | {x['contact']} | {x.get('timestamp')} | —Å—Ç–∞—Ç—É—Å: {x['status']}"
             for typ, x in results[:10]]
        )
        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ:\n\n{txt}", reply_markup=admin_menu_kb())
    await state.clear()

# --- Callback: —Ä–∞—Å—Å—ã–ª–∫–∞ --- #
class AdminBroadcast(StatesGroup):
    waiting_text = State()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_cb(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(AdminBroadcast.waiting_text)
    await callback.answer()

@router.message(AdminBroadcast.waiting_text)
async def admin_do_broadcast(message: types.Message, state: FSMContext, bot: Bot):
    text = message.text
    users = _load_users()
    sent = 0
    for uid in users.keys():
        try:
            await bot.send_message(int(uid), text)
            sent += 1
        except Exception:
            pass
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.", reply_markup=admin_menu_kb())
    await state.clear()
